// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/30/2018 00:19:16"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ffjk
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ffjk_vlg_sample_tst(
	clk,
	sampler_tx
);
input  clk;
output sampler_tx;

reg sample;
time current_time;
always @(clk)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ffjk_vlg_check_tst (
	sq0,
	sq1,
	sq2,
	sq3,
	sampler_rx
);
input  sq0;
input  sq1;
input  sq2;
input  sq3;
input sampler_rx;

reg  sq0_expected;
reg  sq1_expected;
reg  sq2_expected;
reg  sq3_expected;

reg  sq0_prev;
reg  sq1_prev;
reg  sq2_prev;
reg  sq3_prev;

reg  sq0_expected_prev;
reg  sq1_expected_prev;
reg  sq2_expected_prev;
reg  sq3_expected_prev;

reg  last_sq0_exp;
reg  last_sq1_exp;
reg  last_sq2_exp;
reg  last_sq3_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:4] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 4'b1;
end

// update real /o prevs

always @(trigger)
begin
	sq0_prev = sq0;
	sq1_prev = sq1;
	sq2_prev = sq2;
	sq3_prev = sq3;
end

// update expected /o prevs

always @(trigger)
begin
	sq0_expected_prev = sq0_expected;
	sq1_expected_prev = sq1_expected;
	sq2_expected_prev = sq2_expected;
	sq3_expected_prev = sq3_expected;
end



// expected sq0
always
begin
	sq0_expected = 1'b0;
	sq0_expected = #1000 1'b1;
	#1000;
end 

// expected sq1
initial
begin
	repeat(2)
	begin
		sq1_expected = 1'b0;
		sq1_expected = #2000 1'b1;
		# 2000;
	end
	sq1_expected = 1'b0;
end 

// expected sq2
initial
begin
	sq2_expected = 1'b0;
	sq2_expected = #3000 1'b1;
	sq2_expected = #3000 1'b0;
	sq2_expected = #3000 1'b1;
end 

// expected sq3
initial
begin
	sq3_expected = 1'b0;
	sq3_expected = #4000 1'b1;
	sq3_expected = #4000 1'b0;
end 
// generate trigger
always @(sq0_expected or sq0 or sq1_expected or sq1 or sq2_expected or sq2 or sq3_expected or sq3)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected sq0 = %b | expected sq1 = %b | expected sq2 = %b | expected sq3 = %b | ",sq0_expected_prev,sq1_expected_prev,sq2_expected_prev,sq3_expected_prev);
	$display("| real sq0 = %b | real sq1 = %b | real sq2 = %b | real sq3 = %b | ",sq0_prev,sq1_prev,sq2_prev,sq3_prev);
`endif
	if (
		( sq0_expected_prev !== 1'bx ) && ( sq0_prev !== sq0_expected_prev )
		&& ((sq0_expected_prev !== last_sq0_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sq0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sq0_expected_prev);
		$display ("     Real value = %b", sq0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_sq0_exp = sq0_expected_prev;
	end
	if (
		( sq1_expected_prev !== 1'bx ) && ( sq1_prev !== sq1_expected_prev )
		&& ((sq1_expected_prev !== last_sq1_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sq1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sq1_expected_prev);
		$display ("     Real value = %b", sq1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_sq1_exp = sq1_expected_prev;
	end
	if (
		( sq2_expected_prev !== 1'bx ) && ( sq2_prev !== sq2_expected_prev )
		&& ((sq2_expected_prev !== last_sq2_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sq2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sq2_expected_prev);
		$display ("     Real value = %b", sq2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_sq2_exp = sq2_expected_prev;
	end
	if (
		( sq3_expected_prev !== 1'bx ) && ( sq3_prev !== sq3_expected_prev )
		&& ((sq3_expected_prev !== last_sq3_exp) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port sq3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", sq3_expected_prev);
		$display ("     Real value = %b", sq3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_sq3_exp = sq3_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#10000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ffjk_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
// wires                                               
wire sq0;
wire sq1;
wire sq2;
wire sq3;

wire sampler;                             

// assign statements (if any)                          
ffjk i1 (
// port map - connection between master ports and signals/registers   
	.clk(clk),
	.sq0(sq0),
	.sq1(sq1),
	.sq2(sq2),
	.sq3(sq3)
);

// clk
always
begin
	clk = 1'b0;
	clk = #500 1'b1;
	#500;
end 

ffjk_vlg_sample_tst tb_sample (
	.clk(clk),
	.sampler_tx(sampler)
);

ffjk_vlg_check_tst tb_out(
	.sq0(sq0),
	.sq1(sq1),
	.sq2(sq2),
	.sq3(sq3),
	.sampler_rx(sampler)
);
endmodule

