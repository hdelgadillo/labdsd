library ieee;
use ieee. std-logic-1164. all ;
use ieee. numeric-std. all ;
entity uart-rx is 
generic(
DBIT : integer : =8; -- # data bits
SB-TICK: integer:=16 -- # ticks for stop bits
);
port ( 
clk, reset: in std-logic;
rx: in std-logic;
s-tick: in std-logic;
rx-done-tick: out std-logic ;
dout: out std-logic-vector (7 downto 0) 
) ;
end uart-rx ;
architecture arch of uart-rx is
type state-type is (idle, start, data, stop); 
signal state-reg , state-next : state-type;
signal s-reg , s-next : unsigned (3 downto 0) ;
signal n-reg , n-next : unsigned (2 downto 0) ;
signal b-reg , b-next : std-logic-vector (7 downto 0) ;
x signal state-reg , state-next : state-type;
begin 
-- FSMD state & data registers
process (clk , reset)
begin
if reset=’l’ then
state-reg <= idle; 
s-reg <= (others=> ’0');
n-reg <= (others=> '0’);
b-reg <= (others=> ’0’);
state-reg <= state-next;
s-reg <= s-next;
n-reg <= n-next;
b-reg <= b-next;
elsif (clk’event and clk=’l’) then

state-reg <= state-next;
s-reg <= s-next;
n-reg <= n-next;
b-reg <= b-next;
elsif (clk’event and clk=’l’) then
end if ;
end process; 

process (state-reg , s-reg ,n-reg ,b-reg, ~-tick ,rx)
begin
-- next-state logic & data path functional units/routing
state-next <= state-reg;
s-next <= s-reg; 
n-next <= n-reg;
b-next <= b-reg;
rx-done-tick <=’O’;
case state-reg is
when idle =>
if rx=’O’ then
state-next <= start;
s-next <= (others=> ’0 ’;
end if;
when start => 

if (s-tick = ’1’) then
if s_reg=7 then
state-next <= data;
s-next <= (others=>’0’);
n-next <= (others=>’0’); 

else
s-next <= s-reg + 1; 
end if ;
end if ;
when data => 

if (s-tick = ’1’) then
if s_reg=15 then
s-next <= (others=>’0’);
b-next <= rx & b-reg(7 downto 1) ;
if n-reg= (DBIT -1) then 

state-next <= stop ; 
else
n-next <= n-reg + 1; 
end if;
else
s-next <= s-reg + 1; 

end if ;
end if ;
when stop =>
if (s-tick = ’1’) then
if s-reg=(SB-TICK-l)
state-next <= idle
rx-done-tick <= ’ 1 ’
else
s-next <= s-reg + 1;
end if;
end case;
end process;
dout <= b-reg;
end if ;
end arch;
hen 